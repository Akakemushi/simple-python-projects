- pip is the package installer for Python. pip allows you to install additional Python libraries and packages from the Python Package Index (PyPI).
  It's useful for managing dependencies in Python projects. With pip, you can install packages like NumPy, Django, Flask, etc., by running commands
  such as       pip install package_name.
- to run python programs, do   python3   followed by the filename in the command line
- REPL  stands for  Read  Evaluate  Print  Loop,  and it's a way to execute python code typed into the console and get immediate results.
- To initiate REPL,   simply type   "python3"  with nothing after it in the console.  To exit,  either do ctrl + D  or type "exit()"
- BUT!  There is a BETTER version of REPL, which is running    "ipython3"  which gives you stuff like remembering previous commands, using tab, etc.
  Exiting ipython3 is the same as the previous.
- Python is NOT as smart as Ruby, and does not assume that a string + an integer = a string (implicitly converting the integer into a string for you.)
- the "+" operator works on strings for concatenation.
- the "*" operator works on strings for MULTIPLIED concatenation! Nifty.  "Bob" * 5  --> BobBobBobBobBob
- you can put as many * as you want in str * int expressions, and it doesnt matter if they're before or after the str (or both) however you can't
  mix different operators.  For example   10 // 2 * 1 * "Bob" will not work, as the // operator is present.
- python convention is to use underscores for variable names (but this textbook uses camelcase)
- you can do comparisons between ints and floats.   (eg.  14 == 14.00     would be true.)
- comparisons between strings and non-strings will always be False.
- ORDER OF OPERATIONS  1. Math (see syntax) and comparison operators evaluate. 2. "not" operators. 3. "and" operators.  4. "or" operators are last.
  2 + 2 == 4 and not 2 + 2 == 5 or 2 * 2 == 2 + 2
  2 + 2 == 4 and not 2 + 2 == 5 or 4 == 2 + 2
  4 == 4 and not 4 == 5 or 4 == 4
  True and not False or True
  True and True or True
  True or True
  True
- HOW BLOCKS OF CODE WORK IN PYTHON:
    Blocks begin when the indentation increases.
    Blocks can contain other blocks.
    Blocks end when the indentation decreases to zero or to a containing block's indentation.
    Example below:
    name = 'Mary'
    password = 'swordfish'
    if name == 'Mary':
      print('Hello, Mary')
        if password == 'swordfish':
          print('Access granted.')
        else:
          print('Wrong password.')


SYNTAX NOTES
printscreen =   print("")  single quotes also work.   integers without any quotes also work.
operators =  same as usual, but there is ORDER OF OPERATION in python, and priority is as follows from top to bottom...
              ( ) parentheses.  Things inside of parentheses are evaluated first.
              **  exponent
              %  modulus (aka remaineder)
              //  Integer division/floored quotient  (it's just division, but it drops the remainder, if one exists (aka rounds down))
              /   division
              *   multiplication
              -   subtraction
              +   addition
              SO  as an example,  7 - 3 ** 2  evaluates to -2, not 16, because the exponent is evaluated FIRST.
              You can also STACK exponents, so 2 ** 2 ** 4  evaluates to 65536 (huge), not 256.  The last exponent is evaluated and THEN the result is
              treated as the exponent to the next exponent.
- variables =  works like Ruby.  Just put the variable name = value.  You don't need to specify data type.  n = 3, name = "Bob"
               naming restrictions.  1. alphanumeric and underscore only.  2. must not start with number 3. no spaces.
               variable names are CaSe SeNsItIvE
- user input = input()     you can add a message or question inside the parenthesis  input("What's your name?")
               !!IMPORTANT!!   Input will ALWAYS be a string,
- string length =   len(var)   or   len("String literal")
- array length  =   len(array)   or    len([2, 3, 4, 5])
- string/float to int  =   int(string/float)        (in Ruby it's     .to_i)   NOTE: making a float an int will always round it down.
- int/float to string  =   str(int/float)               (in Ruby it's     .to_s)
- string/int to float  =   float(int/string)           (in Ruby it's    .to_f)   NOTE:  making an int a float will add a .0 at the end.
- comments  =   use a hashtag to denote comments in python     #  this is a comments
- string interpolation   =   might not exist... but normal concatenation does.  For example   , print("Hello" + your_name)
- rounding numbers  =    round(float)  rounds to closest integer.
- data type check   =     type(variable_name or value)
- arrays           =     as usual, [1, 2, 3]    but they are called "lists"  ??
- booleans        =      assign with True    or   False.  fisrt letter MUST be capitalized, and you cannot use True  or  False as a variable name.
- comparisons     =      exactly the same as Ruby, Javascript, etc.     ==  !=   <    >   <=    >=
- &&              =      keyword   "and"
- ||              =      keyword   "or"
- !               =      keyword   "not"    not True    will evaluate to False.   not not not not True    will evaluate to True.
- conditionals    =      the condition followed by a COLON... (not curly brackets or parentheses)      if 5 > 4:    if "andy" == "tom":   else:
- if statements   =      Python uses  "if condition:"   "elif condition:"  and   "else:"
- while statements =     Use   "while condition:"
