For anyone reading this, these are just my personal notes as I get to know the Python language and how it is similar/different from Ruby/Javascript.

- pip is the package installer for Python. pip allows you to install additional Python libraries and packages from the Python Package Index (PyPI).
  It's useful for managing dependencies in Python projects. With pip, you can install packages like NumPy, Django, Flask, etc., by running commands
  such as       pip install package_name or  pip install --user package_name
- to run python programs, do   python3   followed by the filename in the command line
- REPL  stands for  Read  Evaluate  Print  Loop,  and it's a way to execute python code typed into the console and get immediate results.
- To initiate REPL,   simply type   "python3"  with nothing after it in the console.  To exit,  either do ctrl + D  or type "exit()"
- BUT!  There is a BETTER version of REPL, which is running    "ipython3"  which gives you stuff like remembering previous commands, using tab, etc.
  Exiting ipython3 is the same as the previous.
- Python is NOT as smart as Ruby, and does not assume that a string + an integer = a string (implicitly converting the integer into a string for you.)
- the "+" operator works on strings for concatenation.
- the "*" operator works on strings for MULTIPLIED concatenation! Nifty.  "Bob" * 5  --> BobBobBobBobBob
- you can put as many * as you want in str * int expressions, and it doesnt matter if they're before or after the str (or both) however you can't
  mix different operators.  For example   10 // 2 * 1 * "Bob" will not work, as the // operator is present.
- python convention is to use underscores for variable names (but this textbook uses camelcase)
- you can do comparisons between ints and floats.   (eg.  14 == 14.00     would be true.)
- comparisons between strings and non-strings will always be False.
- ORDER OF OPERATIONS  1. Math (see syntax) and comparison operators evaluate. 2. "not" operators. 3. "and" operators.  4. "or" operators are last.
  2 + 2 == 4 and not 2 + 2 == 5 or 2 * 2 == 2 + 2
  2 + 2 == 4 and not 2 + 2 == 5 or 4 == 2 + 2
  4 == 4 and not 4 == 5 or 4 == 4
  True and not False or True
  True and True or True
  True or True
  True
- HOW BLOCKS OF CODE WORK IN PYTHON:
    Blocks begin when the indentation increases.
    Blocks can contain other blocks.
    Blocks end when the indentation decreases to zero or to a containing block's indentation.
    Example below:

    name = 'Mary'
    password = 'swordfish'
    if name == 'Mary':
      print('Hello, Mary')
        if password == 'swordfish':
          print('Access granted.')
        else:
          print('Wrong password.')
  Exceptions exist to this rule though, for example, you can have an array/list span across several lines, and Python is smart enough to know
  that the list is not done until it finds the closing bracket ]
  There is also an "override" method when you want to force a particularly long line of code to be on two lines for readability.  To do that,
  you can "pause" the line of code by ending the line with the backslash character   "\".  This tells Python that there is more to come on the next line.
- Libraries/modules are needed to access other functions in Python.  SEE LIBRARIES SECTION FOR LIST
  To include/access those functions in your program, you use the "import" keyword, the name of the module,
  and optionally, more module names separated by commas  DO NOT OVERWRITE MODULES BY GIVING YOUR FILES THE SAME NAME!!
- Keyword Arguments  ---  What is it?  Most arguments are identified by their POSITION in the parentheses, but keyword arguments are called by name
  right before the argument passed to them, like so...  print("Hello", end="")    <-- here "end" is an optional parameter being filled in. (If you careful
  to know, it declares what the final character(s) will be, replacing the default new line character. Another you could use with print() is the "sep" argument
  which replaces the default space with something else when multiple strings are given to print.
- Python Call stack is FILO, First in, Last out.  If a function calls another function, that second function is completed and returns before the first
  function can continue.  Pretty standard.  Terminology wise, when a new function is called, a "Frame Object" is added to the top of the stack.
- !!SCOPE!!   Variables that are assigned within a function call are in the "local" scope, while variables assigned OUTSIDE of any function are in the "global".
  A variable must be in one or the other, it cannot be in both.  THIS IS IMPORTANT!  Local code can READ global variables, but it cannot CHANGE/OVERWRITE
  global variables!  This means that it's technically okay to have a global and a local variable with the same name, as they won't interfere with one another.
  Finally, if you declare a local variable with the same name as a global, the local code will prioritize the local value over the global one, but if a
  variable name is used that has not yet been created locally, the function will assume its a global that you're talking about.
  Note: If you try to READ from the global version, then DECLARE the local version afterwards, you will get an error.  You can't do that.  It really is
  global or local ONLY. Not both.  There IS a way to modify global variable from the local scope, with the "global" keyword (explained later)
  BEST PRACTICE:  Even though you technically CAN use variables with the same name... don't.  It can get confusing which variable is being referenced.
  I don't think that's the case in Ruby... I think local code CAN overwrite globals.
- FORCING a GLOBAL   In regards to scope above, if you MUST alter a global variable from within a local scope, you can do so by invoking the "global" keyword.
  At the top of the function,   use the keyword "global" followed by the name of the global variable.   This sort of "imports" the actual global variable
  into the local scope, and from there, you can set its value to something else as normal.  Doing this will NOT create a local variable with that name.
- SEQUENCE DATA TYPES  Python has a few different sequence data types, which are lists, strings, range objects returned by range(), and tuples.  Many of The
  things you can do with lists can also be done with strings and other values of sequence types: indexing, slicing, using them with for loops, with len(),
  and with the in and not in operators.
- MUTABLE and IMMUTABLE DATA TYPES  Mutable things like lists can have values added, removed or changed.  These terms are important for the definition of
  "mutated", as "overwriting" means that the original is completely thrown out, and something entirely new replaces it.  Strings in Python are Immutable.
  That means that while you can READ specific parts of a string using indicies and slices, you cannot reassign just a part of the string... you have to
  reassign the whole thing.   name = "Jason"    name[2] = "x"   will NOT work.  You would need to do some splitting and concatenation for that, invoking
  new / temporary variables.  This will become important when dealing with "Passing References". In short, there are MUTABLE and IMMUTABLE areas in CPU memory.
- TUPLES  wft is a tuple?  Well it's basically the "IMMUTABLE" clone of the LIST data type.  They are created just like arrays, but with parentheses instead
  of square brackets.  greetings = ("sup", "hi", 3.5, -9).  You can read indexes and slices from tuples, just like lists, but you can't overwrite
  single indexes like you can with lists.    greeting[0] = "bro" will NOT work.     Also, if you need to create a tuple that only has one value in it,
  you'll need to follow that value with a comma, otherwise, Python will think you're just declaring a simple str, int, or float that happens to be inside
  some parentheses.  It has no way to distinguish parentheses used in math from tuple parentheses unless there's a comma inside.
  names = ("Jason",)  is a tuple,   names = ("Jason") is a string.   So why use these? Well, Python can implement some optimizations that make code using
  tuples slightly faster than code using lists.   It also indicates to others some sequential data that you don't intend to change.
- MEMORY IN PYTHON   Variables just store a reference to some value in memory, so when you make another variable reference a previous variable, you're
  actually assigning it the reference to that data, not the data itself.  So if later on you go and change what the first variable is set to, the first
  variable and the second variable will now be pointing to different places in memory.  Let me show you.
    spam = 42      spam points to where 42 is located in memory.
    cheese = spam       cheese points to where spam is CURRENTLY pointing to in memory, so 42.
    spam = 100     spam is now pointing to somewhere else in memory, where 100 is.  But cheese is still pointing to 42.
    spam   (outputs  100)
    cheese  (outputs   42)
  Interestingly enough, I tested this out in Ruby, and Ruby does the same thing, which I didn't know.
  What this means is that when spam was reassigned to 100 above, it did not "change" 42 into 100.  It opened up a new spot in memory, put 100 inside it,
  and referenced that instead.  The spot where 42 resides was left untouched.  Now, MUTABLE data DOES change that exact spot in memory, so anything else
  that references that spot will also "see" the change.  To play around with this, you can get the memory address of some value by
  doing id(variable or value here), and you'll get some arbitrary string of numbers representing the address (which will vary). Check this test out...
    In [2]: num = 12
    In [3]: id(num)
    Out[3]: 140228057547344
    In [4]: num2 = num
    In [5]: id(num2)
    Out[5]: 140228057547344     <--- num2's address is the same as num's
    In [6]: num = 42
    In [7]: id(num)
    Out[7]: 140228057548304     <---- num's addres changed...
    In [8]: id(num2)
    Out[8]: 140228057547344     <---- but num2's did not.
- PASSING LISTS/REFERENCES AS ARGUMENTS     This is an important concept to grasp in order to avoid difficult bugs dealing with memory and pointers.  So,
    when passing IMMUTABLE data types into functions/methods, you're usually fine because copies are made locally, which will not affect the global versions.
    However, when passing MUTABLE data types like lists, you're passing in the reference to the original value, and therefore any changes you make to
    that array locally, WILL CHANGE the original as well, since its referencing the same place in memory.  If you don't want that to happen, you have two
    choices: either convert the data to a type that is immutable (such as from list to tuple), or import the copy library and use copy.copy(list) to make
    a second list that you can safely manipulate without affecting the other one. (and if it's a list of lists, use copy.deepcopy(list) instead.)
- WRAPAROUND HACK (not really a python-specific thing, but I thought it was cool math hack.)  You can use the modulus operator (%) to get the value on the other
    side of an array or matrix.  Let's say you have an array of some length, say, 10.  Now let's say I want to find the values of indicies ADJACENT TO some
    specific index.   Well, if I'm at index 3, then I can find the adjacent ones by going to indicies i+1 and i-1, right?  But what if I'm at the start or
    end of the array?  If i = 0, what then?  I can find i + 1, but there's nothing at i - 1...  Well, we can "wrap around" to the end of the array (that is
    to say index 9) by using  (i - 1) % length.  I don't fully understand why, but when a negative number enters the equasion, the maximum the remainder can
    be becomes the divisor instead of the dividend.  Normally, (when working with positives), the remainder is how much of the dividend was left over when
    as much of it was divided as possible using the divisor.  So for 15 drinks / 6 people, we think of it as 15 drinks - 6 drinks = 9,  9 - 6 = 3, and we can't subtract/reduce
    give the remaining 3 away because everyone wouldn't get one because we don't have enough, so 3 is the remainder of 15, the dividend.  Likewise,
    if we try doing 4 / 10, we think of that as 4 - 10,     which is impossible right off the bat, leaving a remainder of 4.
    Again, it's the dividend.  When you throw a negative number in the mix though, things change.
    -1 % 10 for example leaves a remainder of 9, which is much larger than the dividend, but fits within the divisor. -11 % 10 and
    -101 % 10 also have a remainder of 9.  So while I don't quite understand why, it seems like you can essentially just take the remainder of the divisor?
      -1 % 10 = 9
    is functionally equivalent to...
      I have a -1 cubic foot hole to fill.  I have buckets which cointain 10 cubic ft of cement each.  When the hole is full, how much is left in
      the final bucket?  The answer would be 9 cubic feet. If it was -101 cubic feet, I would use 10 buckets, and 1 cubic foot from the final bucket,
      still leaving 9.
    all this is to say, this method works with all the other indicies, too.    i = 5? No problem.  (5 - 1) = 4  -->    4 / 10 would leave a remainder of 4.
- Chaining method calls.   You can chain method calls in Python just like in Ruby.  Something like myString.upper().lower() is valid.

SYNTAX NOTES
- Strings               Assignment is just like Ruby, use single or double quotes, with double quotes for using single quotes inside.
                        Escape character--   is the backslash character \.  use these
                            \' single quotes
                            \" double quotes
                            \t  tab
                            \n  newline
                            \\  backslash
                        Raw String-- You can convert a string to a "raw string" by puting an r before the initial quote.  Doing so will ignore all escape characters
                          and print exactly what you see. These are helpful if you want to type something that has a lot of backslashes such as a filepath
                          or perhaps url.
                        Multiline strings-- can be started with triple single quotes '''   ''' .  If you do this, you dont need to manually enter \n characters.
                          Multiline strings also accept both single and double quotes by default.  (Note that multiline comments follow a similar formula
                          using three double quotes """   """).
                        String slices-- can be taken just like arrays (below)  myString[3:7] myString[4:]   myString[:9]  etc.
                        String search-- can be done using   search_term in myString  or  search_term not in myString, just like arrays.
                        String interpolation--  There are TWO WAYS to do it in Python now, as of 3.6.  The first is the old way, which looks like this..
                          "This is the old style previous to %s %s." % ("coding_language", version_number)
                            In this version the %s converts whatever data type is sent to it into a string automatically, so you dont need to call str().
                          f"This is the new style of interpolation as of {coding_language} {verson_number}"
                            This is an f-string, and like raw-strings, you MUST HAVE the letter "f" written just before the initial quote mark.
                            as with #{variable} in Ruby, you can do operations and stuff within the {}.  Also, anything within the {} is converted to str.
                        String case--  myString.upper() and myString.lower() convert ALL the characters in the string to upper or lower. These methods do not
                          modify the original string: they return a new one, so you need to store it or set the original equal to the new one.
                          Two other relevant methods are   .islower() and .isupper()  which return T/F if the string is ALL upper or ALL lower.
                          Note, however that there MUST be at least one alphabet character within the string for this to return True. "12345".islower() will be False.
                        isX() methods-- These are various Boolean tests that look at the string and tell you if it matches a particular format.
                            isalpha()   Returns True if the string consists only of letters and isn't blank.
                            isalnum()   Returns True if the string consists only of letters and numbers and is not blank.
                            isdecimal() Returns True if the string consists only of numeric characters and is not blank.
                                        total misnomer here... only returns true if it's a positive whole number or 0.  "3.14" would be False.
                            isspace()   Returns True if the string consists only of spaces, tabs, and newlines and is not blank.
                            istitle()   Returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters.
                                        note that this is sort of a misnomer.  Titles don't capitalize prepositions, but this method thinks they should be.
                        startswith()    takes a string as an argument and returns true or false depending on if the beginning of the string matches the argument.
                        endswith()      same, but matches the end of the string.   These two are useful alternatives to the == operator if you dont need to compare
                                        the entire string.
                        join()      !!! Ruby is different !!! If you have a list (array) of strings that need to be joined together.
                                    In Ruby, this is an array method...   myArray.join(" "), but in Python, this is a STRING method, so the syntax is reversed...
                                    " ".join(myArray)   This would be easy to overlook, so WATCH OUT
                        split()     This is the same as Ruby.  myString.split("some_delimiter") will output a list/array.  If left blank, the default is whitespace.
                                    You can use it to split text by newline characters.
                        partition()     This is new to me.  It takes a string argument to be used like a delimiter, but what it returns is not like .split.
                                        It returns a TUPLE with 3 parts, the first is the "before the partition", the second is the partition itself, and the
                                        third is "after the partition".  It will never return more than 3 parts, even if more than one instance of the partition
                                        is found in the string.  It will use the first one and ignore the rest.  It's a little weird, so as an example,
                                        "I am the king of France".partition("the") would return a tuple containing (("I am ", "the", "king of France"))
                                        Also, if the partition string does not occur in the string, then the first part of the tuple will be the whole string,
                                        and the other two will be blank.  I can't think of a reason to use this, but if you need to keep the partition itself
                                        for some reason, I guess this could be useful?
                                        You can use the multiple assignment trick to catch all three parts into variables like so...
                                        before, partition, after = "This is a test".partition("is")
                        justify methods ---   There are 3 methods that can be used to justify the console output of Python.
                            rjust()     Justify right.  Takes an integer argument that represents the TOTAL WIDTH of the output in the console,
                                        then adds spaces to the left of the string its called on until that total width is reached.  So, if you did, say...
                                        "Hello".rjust(20),    you would get and output of "               Hello", that is, 15 spaces + 5 characters to make 20.
                            ljust()     Justify left.  Same as above, but left.  Duh.
                            center()    Justify center.  You guessed it.
                            Note that you technically CAN put a value that is less than the string length, but no spaces will be added, so it's pointless.
                            Note also that you can add a second argument to change the default (spaces) to some other string or character. center(20, "*") for example.
                        strip methods  --- Used when you want to remove the whitespace from a string (space, tab, newline).
                            strip()     This exists in Ruby, too.  It just returns a string that has all the leading and trailing whitespace removed.
                            rstrip()    Removes whitespace on the right side.
                            lstrip()    Removes whitespace on the left side.
                            Optionally, you can add a string argument into any of these methods.  By doing so, you'll strip away ANY CONSECUTIVE OCCURANCES of ANY
                            of those characters, regardless of order.  Eg., strip("dog") would strip away any lowercase "d", "o", or "g", it found as follows...
                            "odododgggCATgodgod".strip("dog")   outputs  -->    "CAT"    and
                            "ododRodgggCATgodgod".strip("dog")   outputs  -->   RodgggCAT  because that capital R breaks the consecutive string.
                        Unicode stuff  ---  when you need to get the unicode value of a character, or convert a unicode value into a character.
                            ord()       Takes a single-character string as an argument, and outputs the unicode point value of that character.
                                        Note that this is NOT a string method, it is a built-in Python function.
                            chr()       Opposite effect--  takes an integer representing the unicode value of some character, and outputs that character.
                            You might use these when you need to do math on letters... or order them... or something.... I dunno.
- printscreen =         print("")  single quotes also work.   integers without any quotes also work.
                        You can pass multiple strings to print(), separated by commas, and they will be printed, separated by a space.
                        You can override the default spaces and new line characters that the print() function adds by using the Keyword Arguments "sep" and "end"
                        respectively, like so....    print("Hello", end="")  <-- stops console from going to next line.   print("milk", "eggs", "spam", sep=", ")
                        will change   the output    "milk eggs spam"  into   "milk, eggs, spam"
- interpolation =       To do interpolation, use the symbols %s, %i, or %f directly within the string-- then, after the final quotation mark (but still within
                        the parentheses), type a   %    followed by ANOTHER set of parentheses within the first set of parentheses.
                        Inside of the secondary parentheses you should include (in order) the values that will be filled into the string.
                        The values provided as arguments can be either direct values (such as, 6,  3.14,  or "giraffe") or variable names.
- concatenation =       nothing new here.  Just use ' + ' between two strings.   "I am " + "Jason"
- operators =           same as usual, but there is ORDER OF OPERATION in python, and priority is as follows from top to bottom...
                            ( ) parentheses.  Things inside of parentheses are evaluated first.
                            **  exponent
                            %  modulus (aka remainder)
                            //  Integer division/floored quotient  (it's just division, but it drops the remainder, if one exists (aka rounds down))
                            /   division
                            *   multiplication (works on strings and arrays too)
                            -   subtraction
                            +   addition (also concatenation for strings and arrays)
                        SO  as an example,  7 - 3 ** 2  evaluates to -2, not 16, because the exponent is evaluated FIRST.
                        You can also STACK exponents, so 2 ** 2 ** 4  evaluates to 65536 (huge), not 256.  The last exponent is evaluated and THEN the result is
                        treated as the exponent to the next exponent.   There are also shortcuts, as with other languages, as follows:
                            += x  the  shorthand  for   num = num + x      (also works on strings!)
                            -= x
                            *= x      (also works on strings!)
                            /= x
                            %= x
- variables =           works like Ruby.  Just put the variable name = value.  You don't need to specify data type.  n = 3, name = "Bob"
                        naming restrictions.  1. alphanumeric and underscore only.  2. must not start with number 3. no spaces.
                        variable names are CaSe SeNsItIvE
                        you can delete a variable (and its value) using the keyword "del".  del variable_name (though there's rarely a need for this.)
                        There is a shortcut for assigning multiple variables at once, if you have an array(list) for them.  Basically, instead of this...
                            cat = ["fat", "gray", "loud"]
                            size = cat[0]
                            color = cat[1]
                            disposition = cat[2]
                        you could write this in 2 lines of code instead...
                            cat = ["fat", "gray", "loud"]
                            size, color, disposition = cat
                        Naturally, the order matters, and the number of variables MUST equal the number of list items.

- user input =          input()     you can add a message or question inside the parenthesis  input("What's your name?")
                        !!IMPORTANT!!   Input will ALWAYS be a string,
- string length =       len(var)   or   len("String literal")
- array length  =       len(array)   or    len([2, 3, 4, 5])
- arrays         =      arrays in Python are called "lists", and the array itself is the "list value", which can be confusing.
                        So for example   pets = ["dog", "cat", "sloth"]     the "list value" would be ["dog", "cat", "sloth"], since that is
                        the value of "pets".    Stuff inside the array are called "items", and they are separated by commas, as normal.
                        You can make a list of lists  [[1, 2, 3], ["dog", "cat", "hat"]].
                        Lists CAN contain items of different data types, so   list = ["apple", 3, 5.7] is fine.
                        Like Ruby, you can get the LAST item by doing   list[-1]  and so on going backwards.
                        You can concatenate and multiply lists just like you can with strings using + and *
- array slice        =  To get an array slice, the syntax is  array[1:5]   where the first is the start of the slice, and the second is the stop.
                        CAREFUL!  The second number means "go up to but NOT include this" Also, don't get confused and think that the second number
                        means the length of the slice... it doesn't.  You can set variable values with slices.  slice =  array[3:5]
                        Shortcuts -   by leaving out a number such as  [:5]  or  [3:]  you are telling Python that you want to start at the
                        beginning, or go all the way to the end, respectively.
- array item removal =  To delete a single item from an array, use the keyword  "del", followed by the index like so:   del  array[2]
                        all the items after that index get moved forward. You can also delete using slice notation (see above)
- array include?     =  Works like a boolean operator such as == or > .  use keywords "in" and "not in" like so:
                        "howdy" in ["hello", "hi", "howdy", "heyas"]    <-- this would evaluate to True.
- array iteration   =   I over an array with a for loop, like so:   for your_variable_name in name_of_array:  this is for_each in Ruby.
- each_with_index   =   In Python you can do something like.....  for i in range(len(array)):    and use "i" for the index number and data.
                        Alternatively, you can use the "enumerate() function like so:
                            for index, item in enumerate(array_name):
                              print("Index ") + str(index) + " in this list is: " + item
                        Note here that the words "index" and "item" have been used, but you could use any variable name.
- tuples            =   tuples are created just like lists/arrays, but with parentheses instead of square brackets. ("hi", "hello", "sup")
- hashes            =   in Python, hashes are called "DICTIONARIES", but function exactly the same way...
                        myDictionary = {'key1': 'value1', 'key2': 'value2'}
- accessing hashes  =   Again, same as Ruby.  myDictionary["someKey"]  will give you the value stored at that key, and like Ruby,
                        the key-value pairs are unordered, so two dictionaries with the same key-value pairs are equal to each other regardless of order.
                        You can use integers and floats as the keys for hash values.
- hash sub-types    =   Dictionaries (hashes) in python have subtypes for all the keys, all the values, and all the key-value pairs.  To get these
                        data types (known as dict_keys, dict_values, dict_items respectively), use the name of the dictionary  followed by
                        .keys(), .values(), or .(items) respectively.  What you get back is not an array (it is not mutable like an array),
                        but something more like it, and you can ITERATE over it like an array, which is what they are usually used for.
                        If you want to turn these 3 data types into an array, you can:  just do  list(name_of_dict_type), as you would for a tuple.
                        It should also be noted that the dict_items  type contains a sequence of tuples.
                        IMPORTANT NOTE* If you iterate over a hash that has two or more keys named the same, only the LAST one will be counted, and only
                        the LAST value will be assigned to that key.  So, myHash = {"name": "Bob", "name": "Jim"} will be length 1, and name = Jim.
- check for keys/values  =   In ruby, this would be   hash.has_key?(search_term), but in Python, this would be search_term in dictionary.keys()  ,
                        making use of the "in" or "not in" keywords.  There is also a shortcut for this, if you just omit the final   .keys() it does the same.
                        You can likewise use .values() to search for a value instead.  (There is no shortcut for values.)
- get hash values      =   This combines checking for the existance of a key AND fetching the value all in one.     Do   dictionary.get(key, fallback)
                          As the syntax implies, you need two arguments, the first is the key whose value you want, and the second is the default or
                          fallback value to use in the event that the key doesn't exist.
- set key-value default =  The syntax for this is    dictionary.setdefault("key", "default_value")    What this does is check that dictionary for that key,
                           and if the key doesn't exist, it creates it and sets its value to the default value.  However if the key DOES exist already,
                           it simply returns the value that's already stored (thus ignoring the second argument).  This could be useful when you want
                           to keep a running tally of various items, but you aren't sure just how many different items there are.  You can dynamically
                           do this with something like...
                           tally_keeper = {}
                              for thing in group:
                                tally_keeper.setdefault(thing, 0)   <-- if the thing has never before been seen in the group, it adds it and sets it to 0
                                tally_keeper[thing] += 1    <--  It increases the count of that thing by 1.
- PRETTY printing       =  (must import pprint library)  the pprint.pprint(data) function is just a more readable way to print hash data.  Prints each
                           key-value on a new line. If you want that output returned as a string instead, use pprint.pformat(data).
- string/float to int  =   int(string/float)        (in Ruby it's     .to_i)   NOTE: making a float an int will always round it down.
- int/float to string  =   str(int/float)               (in Ruby it's     .to_s)
- string/int to float  =   float(int/string)           (in Ruby it's    .to_f)   NOTE:  making an int a float will add a .0 at the end.
- string/tuple to list =   list(str/tuple)         (in Ruby it's   .to_a)
- list/string to tuple =   tuple(str/list)      (not in Ruby)
                         CAUTION!  Note that the above 5 type converters ONLY MAKE COPIES; you need to catch the return value in a variable.
- comments           =   Use a hashtag to denote comments in python     #  this is a comments
- rounding numbers  =    round(float)  rounds to closest integer.
- absolute value    =    abs(int or float)  will turn the number positive if it is negative.
- data type check   =    type(variable_name or value)
- booleans        =      assign with True    or   False.  fisrt letter MUST be capitalized, and you cannot use True  or  False as a variable name.
- comparisons     =      exactly the same as Ruby, Javascript, etc.     ==  !=   <    >   <=    >=
- &&              =      keyword   "and"
- ||              =      keyword   "or"
- !               =      keyword   "not"    not True    will evaluate to False.   not not not not True    will evaluate to True.
- conditionals    =      the condition followed by a COLON... (not curly brackets or parentheses)      if 5 > 4:    if "andy" == "tom":   else:
- if statements   =      Python uses  "if condition:"   "elif condition:"  and   "else:"
- while statements =     Use   "while condition:"
- break statement  =     just type the keyword  "break"  with nothing after it to exit a loop prematurely.
- (NEW!) continue  =     just type the keyword  "continue" with nothing after it.   What this does is jump to the START of the while loop prematurely.
- Falsey values    =     0  (an int)  0.0  (a float)  and  ''   (an empty string)   all evaluate to False in Python.
- For  loop        =     Example-     for i in range(5):          the part  "in range(5)"  is unique.   It sets the falue of i to 0 initially,
                         then counts 5 times, so i will equal    i = 0,  i = 1, i = 2, i = 3, i = 4   stop.
                         Note:  The "continue" statement in a For loop will ITERATE and then jump to the start.
                         Also, be careful... the variable name you give the incrementor (such as "i") is apparently VISIBLE to code OUTSIDE of that loop!
- More about range()  =  The range() function can have 1, 2, or 3 arguments.  If it has only 1 argument, then the range is assumed to start at 0, and
                         stops just before the argument given.  If TWO arguments are given, then the first argument becomes the STARTING point, and that
                         is used instead of 0.  If THREE arguments are used, the third argument is the "step" setting, or maybe think of it as the interval.
                         It's the number of steps that the iteration skips over.  Examples:
                         range(11) produces 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
                         range(5, 11) produces  5, 6, 7, 8, 9, 10   <---Note that it produces 5, but not 10.
                         range(5, 11, 2)  produces  5, 7, 9  <-----Note that "10" is not produced because the last "skip" would skip past the end.
                         This function is for int  only, it will not work with floats.  You can, however, use negative numbers, and even count backwards.
- random number          (must import random library) random.randint(start, end)  The arguments are inclusive, so the start and end numbers can appear as results.
- random array item      (must import random library) random.choice(array_name)
- shuffle array          (must import random library) random.shuffle(array_name) this shuffles the ORIGINAL array.  It doesn't make a copy.
- wait()                 (must import time library)  time.sleep(time in seconds)  argument is a float that represents seconds.
- copy()                 (must import copy library) makes a copy of a mutable data type.  The "why?" is more important than the "what" here. Info above.
- deepcopy()             (must import copy library) same as above, but works on lists with lists in them. (i.e., goes deeper, hence the name.)
- copy()                 (must import pyperclip library)  NOT THE SAME AS ABOVE!!!  This one accesses the computers clipboard.
- functions              =  use the "def" keyword, followed by the name of the function, parentheses, and a colon.     def hello():
                         To add parameters to your function, simply add one or more variable names in the parentheses, separated by commas.
                         It looks like you don't need to declare what data type your parameters can accept... HOWEVER, how those variables are used within
                         the function block will of course expect the values to be of a certain type... So it looks like it's up to the coder to keep
                         track of this.
- methods                just like a function, but it's called on a value.  This is very much like Ruby.  Call them with a dot "."  The main thing to
                         remember is that in Python, you need the closing parentheses, even if it's empty.  Each data type has its own built-in methods.
- array methods          FIND-- array.index("item_to_locate")    will return the index of the argument, if it exists (or the first instance of that argument
                            if duplicates exist.)
                         PUSH-- array.append(item_to_add)  adds the item to the end of the list. MODIFIES ORIGINAL LIST
                         INSERT AT--  array.insert(index, item_to_insert) the item will take over that position in the
                            index, and everything gets shoved over one from there. MODIFIES ORIGINAL LIST
                         DELETE-- array.remove(item_to_remove)   removes the item (if it exists, error otherwise) and moves everything to fill the gap.
                            (note that if you want to delete by INDEX and not VALUE, you need to use the "del" keyword function, detailed above.)
                            (note that if duplicates exist, only the FIRST instance will be deleted.) MODIFIES ORIGINAL LIST
                         POP--  array.pop()  does 2 things... it RETURNS the last item in the list, AND, it MODIFIES ORIGINAL LIST by deleting that last item.
                         SORT--  array.sort()  sorts the array.  Works on strings and numbers, BUT not on lists containing BOTH strings and numbers.
                            CAUTION!  This sorts things in ASCIIbetical order, so capitals will ALWAYS come before lower-case. If you want to avoid this,
                            , use the optional keyword argument (key=str.lower) This option will NOT affect the values, just the sorting.
                            There is an optional keyword argument available, (reverse=True) to sort a list in reverse order. MODIFIES ORIGINAL LIST
                         REVERSE--  array.reverse()  reverses the items in a list AS THEY ARE. (i.e., it doesn't sort them, so don't get confused.)
                            This is not the same thing as the keyword "reverse" mentioned in SORT.  MODIFIES ORIGINAL LIST
- return values       =  In Python, you must explicitly use the "return" keyword followed by a value or an expression (that will be evaluated).
                         Note that the "return" line immediately exits the function, ignoring anything below that line.
                         Note that you can pass return values as arguments to other functions.
                         Any function that does not explicitly return anything, will return "None" by default (see next).  Likewise, when "return" is used
                         without anything after it, the result will also be "None".
- Nil/Null            =  In Python, the "lack of any value" value is called "None" (with a capital N).  None is its own data type, and is the only value possible.
- Error Handling      =  Use the "try" and "except" statements.  Code that could potentially throw an error is put into a "try" clause.  Then, if an error
                         DOES occur, rather than crashing, the code moves to the following "except" block.  For example, try dividing by zero....
                         def spam(divided_by):
                             try:
                                 return 42 / divided_by
                             except ZeroDivisionError:
                                 print("Error: Invalid argument.")
                         Note: When an error does occur, the code does NOT jump back into the "try" block.  It just keeps going from the except block.
                         Also note that you need the NAME of the error to use the "except" clause.  Here are some names I've encountered.
                         ZeroDivisionError, UnboundLocalError, TypeError, SyntaxError, KeyboardInterrupt, ValueError, IndexError, AttributeError, KeyError

STANDARD LIBRARIES
Name        Description
random      contains functions related to random number generation, such as random.randint(1, 10), random.choice(list)
sys         contains functions related to the.. system? I guess? Such as sys.exit(), which will terminate the program immediately.
            (normally it terminates when it reaches the bottom.  This is useful for an infinitely looping menu that doesnt exit until the user
            selects or types "exit")
os
math        contains functions related to math (duh).  such as round(float) and abs(int/float) which turns values positive.
time        contains functions for clocks and waiting, such as time.sleep(0.1)  (pause for 1/10 of a second)
copy        contains function for copying, useful for passing mutable data types such as lists and dictionaries.  Has .copy() and .deepcopy()
pprint      contains pprint and pformat, which help make output more readable (like printing hash data on separate lines, for example)
pyperclip   (3rd party, must download) contains functions for accessing your computers clipboard, which is handy!!
            namely,  pyperclip.copy() and pyperclip.paste()
