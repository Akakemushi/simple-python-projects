1. some_array.count in Ruby is len(some_array) in Python.
2. I often forget that you need "enumerate()" to get indexes with an array


-------------===============Syntactic Sugar Stuff==============-----------------
1. A concise way to create lists, dictionaries, or sets without needing loops or conditionals.

    nums = [1, 2, 3, 4]
    squares = [x**2 for x in nums]
    print(squares)  # Output: [1, 4, 9, 16]

    nums = [1, 2, 3]
    square_dict = {x: x**2 for x in nums}
    print(square_dict)  # Output: {1: 1, 2: 4, 3: 9}

    nums = [1, 2, 2, 3]
    unique_squares = {x**2 for x in nums}
    print(unique_squares)  # Output: {1, 4, 9}

2. Ternary one-line if statements

    x = 10
    status = "even" if x % 2 == 0 else "odd"
    print(status)  # Output: "even"

3. Unpacking iterables directly into variables

    a, b = 1, 2
    print(a, b)  # Output: 1 2

    nums = [1, 2, 3]
    a, b, c = nums
    print(a, b, c)  # Output: 1 2 3

    a, *rest, b = [1, 2, 3, 4, 5]
    print(a, rest, b)  # Output: 1 [2, 3, 4] 5

4. The Lambda function allows for creation of single line annonymous functions

    square = lambda x: x**2
    print(square(4))  # Output: 16

5. Default and/or keyword arguments for functions

    def greet(name="World"):
        print(f"Hello, {name}!")
    greet()            # Output: "Hello, World!"
    greet("Alice")     # Output: "Hello, Alice!"

6. Chaining comparisons

    x = 5
    print(1 < x < 10)  # Output: True

7. The "zip" function combines multiple iterables into tuples

    names = ["Alice", "Bob"]
    ages = [25, 30]
    combined = list(zip(names, ages))
    print(combined)  # Output: [('Alice', 25), ('Bob', 30)]

8. F strings are another way to interpolate

    name = "Alice"
    age = 30
    print(f"{name} is {age} years old.")  # Output: "Alice is 30 years old."
